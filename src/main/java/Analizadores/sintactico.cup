/*--------------- 1er Area: Codigo de Usuario -----------------------*/
//-------> importaciones, paquetes
package Analizadores;
import java_cup.runtime.Symbol;
import java.util.LinkedList;
import Estructuras.*;
import GUI.Interface;
//------> Codigo para el parser,variables, metodos
parser code
{:
    public String resultado = "";
    public static Nodo raiz;
    public int numHojas = 1;
    public LinkedList<ExpresionRegular> expresiones = new LinkedList<ExpresionRegular>();
    public Nodo getRaiz(){ return raiz;}
    public LinkedList<ExpresionRegular> getExpresiones(){return expresiones;}


    public void syntax_error(Symbol s)
    {
        System.err.println("Error en la Linea " + (s.right+1) +" Columna "+(s.left+1)+ ". Identificador "+s.value + " no reconocido. Se ha recuperado del error." );
        error nuevo = new error("Error Sintactico (Recuperado)", s.value.toString(), s.right+1, s.left+1);
        Interface.listaErrores.add(nuevo);
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
        System.err.println("Error en la Linea " + (s.right+1)+ " Columna "+(s.left+1)+". Identificador " +s.value + " no reconocido.");
        error nuevo = new error("Error Sintactico", s.value.toString(), s.right+1, s.left+1);
        Interface.listaErrores.add(nuevo);
    }
:}

//------> Codigo para las acciones gramaticales
action code
{:  :}

/*--------------- 2da Area: Declaraciones -----------------------*/

//------> declaracion de terminales 

terminal String porc, conj, dospuntos, id, flecha, ptycoma, coma, letra, digito, ascii, conc, or, kleen,
 mas, llava, llavc, guion, cadena, escapado, interrogacion, mayorq;

//------> declaracion de no terminales
non terminal String S, VALID, CONJUNTO, CONJUNTOS, LISTASIMB, CUERPO, CONJ, SIMBCONJ;
non terminal Nodo ER,SIMB;
non terminal ExpresionRegular EXPR;
non terminal LinkedList<ExpresionRegular> EXPRESIONES;
non terminal Object ENCABEZADO;

//------> Precedencia de menor a mayor

//precedence left id;
//precedence left escapado;

start with S;

/*--------------- 3ra Area: Reglas Sintacticas -----------------------*/
S::= llava CUERPO:a llavc                             {:  :}
;
CUERPO ::= ENCABEZADO:a porc porc porc porc VALID:b   {: :}
        | error
;

ENCABEZADO ::= CONJUNTO ENCABEZADO                    {:  :}
        | EXPR:a ENCABEZADO:b                         {: RESULT = b; parser.expresiones.add(a); :}
        | CONJUNTO                                    {:  :}
        | EXPR:a                                      {: parser.expresiones.add(a); :}
;

CONJUNTO::= conj dospuntos id flecha CONJ:a ptycoma   {:  :}
;

CONJ::= CONJ:a coma SIMBCONJ:b                        {:  :}  
    | LISTASIMB:a                                     {:  :}
;

LISTASIMB::= SIMBCONJ:a guion SIMBCONJ:b              {:  :}
            | SIMBCONJ:c                              {:  :}
;

SIMB ::= letra:a                                      {: RESULT = new Hoja( parser.numHojas, a.toString(), "" , false, null, null); parser.numHojas++;  :}
    | digito:a                                        {: RESULT = new Hoja( parser.numHojas, a.toString(), "" , false, null, null); parser.numHojas++;  :}
    | ascii:a                                         {: RESULT = new Hoja( parser.numHojas, a.toString(), "" , false, null, null); parser.numHojas++;  :}
    | cadena:a                                        {: RESULT = new Hoja( parser.numHojas, a.toString(), "" , false, null, null); parser.numHojas++;  :}
    | escapado:a                                      {: RESULT = new Hoja( parser.numHojas, "\\" + a.toString(), "" , false, null, null); parser.numHojas++; :}

;

EXPR ::= id:b flecha ER:a ptycoma                       {:
                                                        RESULT = new ExpresionRegular(new ArbolSintactico(a), b); parser.numHojas = 1;
                                                      :}
    | error
;

ER::= conc ER:a ER:b                                  {: RESULT = new Nodo( ".", "",false, a, b ); :}
    | or  ER:a ER:b                                   {: RESULT = new Nodo( "|", "",false, a, b ); :}
    | kleen ER:a                                      {: RESULT = new Nodo( "*", "",false, a, null ); :}
    | mas ER:a                                        {: RESULT = new Nodo( "+", "",false, a, null ); :}
    | interrogacion ER:a                              {: RESULT = new Nodo( "?", "",false, a, null ); :}
    | llava id:a llavc                                {: RESULT = new Hoja( parser.numHojas, a.toString(), "", false, null, null); parser.numHojas++; :}
    | SIMB:a                                          {: RESULT = a; :}
;

SIMBCONJ ::= letra:a                                  {:   :}
    | digito:a                                        {:   :}
    | ascii:a                                         {:   :}
    | cadena:a                                        {:   :}
    | escapado:a                                      {:   :}
    | error
;

VALID ::= id dospuntos cadena ptycoma VALID | id dospuntos cadena ptycoma
;
